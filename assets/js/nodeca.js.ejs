/*global window*/

(function () {
  'use strict';


  var nodeca = window.nodeca = {
    config: {
      fontomas: <%- JSON.stringify(config('fontomas')) %>
    },
    runtime: {
      sio:      io.connect(null, {'max reconnection attempts': 1024}),
      env:      "<%= env() %>",
      version:  "<%= version() %>",
    }
  };

  <% if ('development' === env()) { %>
    nodeca.logger = {
      assert : _.bind(console.assert || console.debug || console.log || $.noop, console),
      error  : _.bind(console.error || console.log || $.noop, console),
      info   : _.bind(console.info || console.log || $.noop, console),
      debug  : _.bind(console.debug || console.log || $.noop, console)
    };
  <% } else { %>
    nodeca.logger = {
      assert : $.noop,
      error  : $.noop,
      info   : $.noop,
      debug  : $.noop
    };
  <% } %>


  function execRpcCall(msg, callback) {
    nodeca.runtime.sio.emit('server', msg, function (res) {
      if (res.version !== nodeca.runtime.version) {
        // TODO: implement software upgrade here
        nodeca.client.fontomas.util.notify('error', {layout: 'bottom'},
          '<strong>Application is outdated. Please ' +
          '<a href="/" style="text-decoration:underline">reload</a>' +
          ' page.</strong>');
        return;
      }

      (callback || $.noop)(res.err, res.result);
    });
  }


  nodeca.runtime.rpc = function (name, params, callback) {
    var msg = {
      version:  nodeca.runtime.version,
      method:   name,
      params:   params
    };

    // conected. call immediately
    if (nodeca.runtime.sio.socket.connected) {
      execRpcCall(msg, callback);
      return;
    }

    // disconnected. connet and once connected - call rpc
    nodeca.runtime.sio.socket.connect(function () {
      execRpcCall(msg, callback);
    });
  };
}());
