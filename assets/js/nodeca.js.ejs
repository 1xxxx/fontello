/*global window*/

//  vim:syntax=javascript
//= require faye-browser

(function () {
  'use strict';


  var nodeca = window.nodeca = {
    config: {
      fontomas: <%- JSON.stringify(config('fontomas')) %>
    },
    runtime: {
      faye:     new Faye.Client('/faye'),
      env:      "<%= env() %>",
      version:  "<%= version() %>"
    }
  };

  <% if ('development' === env()) { %>
    nodeca.logger = console;
    nodeca.logger = {
      assert : console.assert || console.debug || console.log,
      error  : console.error || console.log,
      info   : console.info || console.log,
      debug  : console.debug || console.log
    };
  <% } else { %>
    nodeca.logger = {
      assert : $.noop,
      error  : $.noop,
      info   : $.noop,
      debug  : $.noop
    };
  <% } %>


  function execRpcCall(msg, callback) {
    nodeca.runtime.sio.emit('server', msg, function (res) {
      if (res.version !== nodeca.runtime.version) {
        // TODO: implement software upgrade here
        nodeca.client.fontomas.util.notify('error', {layout: 'bottom'},
          '<strong>Application is outdated. Please ' +
          '<a href="/" style="text-decoration:underline">reload</a>' +
          ' page.</strong>');
        return;
      }

      (callback || $.noop)(res.err, res.result);
    });
  }


  var rpc_request_id = 0;
  var rpc_callbacks  = {};

  nodeca.runtime.rpc = function (name, params, callback) {
    var id = rpc_request_id++, handler, msg, channel;

    msg = {
      version:  nodeca.runtime.version,
      method:   name,
      params:   params
    };

    channel = '/rpc-' + nodeca.runtime.faye.getClientId();
    handler = function (data) {
      if (id === data.id) {
        if (data.msg.version !== nodeca.runtime.version) {
          // TODO: implement software upgrade here
          nodeca.client.fontomas.util.notify('error', {layout: 'bottom'},
            '<strong>Application is outdated. Please ' +
            '<a href="/" style="text-decoration:underline">reload</a>' +
            ' page.</strong>');
          return;
        }

        (callback || $.noop)(data.msg.err, data.msg.result);
        nodeca.runtime.faye.unsubscribe(channel, handler);
      }
    };

    nodeca.runtime.faye.subscribe(channel,        handler);
    nodeca.runtime.faye.publish(channel + '-req', {id: id, msg: msg});
  };
}());
