var Fontomas = (function (Fontomas) {
    "use strict";

    var cfg = {
        id: {
            tab: "#tab",
            select: "#select",
            rearrange: "#rearrange",
            save: "#save",
            notification: "#notifications-container",

            bad_browser: "#fm-bad-browser",
            glyph_count: "#fm-glyph-count",

            icon_size: "#fm-icon-size",
            file: "#fm-file",
            file_browse_button: "#fm-file-browse-button",
            file_drop_zone: "#fm-file-drop-zone",
            use_embedded: "#fm-use-embedded",

            form_charset: "#fm-form-charset",

            tab_save: "#fm-tab-save",
            font_list: "#fm-font-list",
            generated_font: "#fm-generated-font",

            font: "#fm-font",
            download_font_button: "#fm-download-font-button",
            font_output: "#fm-font-output"
        },
        css_class: {
            font_name: ".fm-font-name",
            glyph_group: ".fm-glyph-group",
            glyph_div: ".fm-glyph-div",
            rg_icon: ".rg-icon",
            disable_on_demand: ".fm-disable-on-demand"
        },
        templates: {
            icon_size: "#fm-icon-size-template",
            use_embedded: "#fm-use-embedded-template",
            font_item: "#fm-font-item-template",
            glyph_item: "#fm-glyph-item-template",
            genfont_glyph_item: "#fm-genfont-glyph-item-template"
        },

        // class icon_size_prefix+"-<num>" added when icon size has changed
        icon_size_prefix: "fm-icon-size-",
        icon_size_classes: "", // precalculated by initCfg()

        preview_icon_sizes: [32, 24, 16],
        live_update: true,
        fix_edges: true,
        scale_precision: 6, // truncate the mantissa when scaling svg paths
        basic_latin: {
            str: "",    // precalculated by initCfg()
            begin: 33,
            end: 126,
            extra: " "
        },
        unicode_private: {
            begin: 0xf0000,
            end: 0xf005e
        },
        draggable_options: {
            revert: "invalid",
            cursor: "move",
            helper: "clone",
            opacity: 0.5,
            disabled: false
        },
        droppable_options: {
            hoverClass: "fm-drop-hover",
            tolerance: "pointer"
        },
        path_options: {
            fill: "#000",
            stroke: "#000",
            "stroke-width": 0
        },
        notify: {
            dup: {},    // for suppressing duplicates
            options: {expires: 4000},
            templates: {
                info: "basic-template",
                alert: "icon-template"
            }
        },
        output: {
            filename: "fontomas.svg",
            font_id: "FontomasCustom",
            horiz_adv_x: 500,
            units_per_em: 1000,
            ascent: 750,
            descent: -250,
            metadata: "This is a custom SVG font generated by Fontomas",
            missing_glyph_horiz_adv_x: 500
        }
    },

    // environment
    env = {
        is_file_proto: (window.location.protocol === "file:"),
        filereader: null
    },

    app = {
        models: {},
        collections: {},
        views: {}
    },

    debug = {
        is_on: false
    },

    initCfg = function () {
        console.log("initCfg");

        // init icon_size_classes
        cfg.icon_size_classes = cfg.preview_icon_sizes.map(function (item) {
            return cfg.icon_size_prefix+item;
        }).join(" ");

        // init cfg.basic_latin.str
        cfg.basic_latin.str = "";
        for (var i=cfg.basic_latin.begin; i<=cfg.basic_latin.end; i++) {
            cfg.basic_latin.str += String.fromCharCode(i);
        }
        cfg.basic_latin.str += cfg.basic_latin.extra;
    },

    // usage: index.html#debug:maxglyphs=10,noembedded,nofilereader
    initDebug = function () {
        var hash = window.location.hash.substr(1),
            params = hash.split("&"),
            i, len,
            vars,
            j, len2,
            pair;
        for (i=0, len=params.length; i<len; i++) {
            if (params[i].split(":").indexOf("debug") === 0) {
                debug.is_on = true;
                vars = params[i].split(":")[1].split(",");
                for (j=0, len2=vars.length; j<len2; j++) {
                    pair = vars[j].split("=");
                    debug[pair[0]] = pair[1] && pair[1] !== "" ? pair[1] : true;
                }
                break;
            }
        }
    };

    (function () {
        initCfg();
        initDebug();
    }());

    // public interface
    return $.extend(true, Fontomas, {
        cfg: cfg,
        env: env,
        app: app,
        debug: debug
    });
}(Fontomas || {}));
