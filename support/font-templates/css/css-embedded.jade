- if (_.any(glyphs, function (g) { return 0xffff < g.code; }))
  | @charset "UTF-8";
  != '\n'
  != '\n'

- var rnd = Math.floor(Math.random()*100000000);
:stylus_nowrap
  @font-face {
    font-family: '#{font.fontname}';
    src: url('../font/#{font.fontname}.eot?#{rnd}');
    src: url('../font/#{font.fontname}.eot?#{rnd}#iefix') format('embedded-opentype'),
         url('../font/#{font.fontname}.svg?#{rnd}##{font.fontname}') format('svg');
    font-weight: normal;
    font-style: normal;
  }
  @font-face {
    font-family: '#{font.fontname}';
    src: url('data:application/octet-stream;base64,%WOFF64%') format('woff'),
         url('data:application/octet-stream;base64,%TTF64%') format('truetype');
  }
  /* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */
  /* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */
  /*
  @media screen and (-webkit-min-device-pixel-ratio:0) {
    @font-face {
      font-family: '#{font.fontname}';
      src: url('../font/#{font.fontname}.svg?#{rnd}##{font.fontname}') format('svg');
    }
  }
  */
 
- if (!meta.css_use_suffix)
  | [class^="#{meta.css_prefix_text}"]:before, [class*=" #{meta.css_prefix_text}"]:before
- else
  | [class$="#{meta.css_prefix_text}"]:before, [class*="#{meta.css_prefix_text} "]:before

| {
|   font-family: "#{font.fontname}";
|   font-style: normal;
|   font-weight: normal;
|   speak: none;
| 
|   display: inline-block;
|   text-decoration: inherit;
|   width: 1em;
|   margin-right: .2em;
|   text-align: center;
|   /* opacity: .8; */
| 
|   /* For safety - reset parent styles, that can break glyph codes*/
|   font-variant: normal;
|   text-transform: none;
|      
|   /* fix buttons height, for twitter bootstrap */
|   line-height: 1em;
| 
|   /* Animation center compensation - magrins should be symmetric */
|   /* remove if not needed */
|   margin-left: .2em;
| 
|   /* you can be more comfortable with increased icons size */
|   /* font-size: 120%; */
| 
|   /* Uncomment for 3D effect */
|   /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */
| }

- var i, g, css, hex, chr
- for (i in glyphs)
  - g = glyphs[i]
  - css = meta.css_use_suffix ? g.css + meta.css_prefix_text : meta.css_prefix_text + g.css
  - hex = '\\' + g.code.toString(16)
  - chr = unichr(g.code)
  != '\n'
  - if (0xffff < g.code)
    | .#{css}:before { content: '#{chr}'; } /* '#{hex}' */
  - else
    | .#{css}:before { content: '#{hex}'; } /* '#{chr}' */
